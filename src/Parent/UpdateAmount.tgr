trigger UpdateAmount on Quote__c (after insert, after update) { //You want it on update too, right?
  Map<ID, Opportunity> parentOpps = new Map<ID, Opportunity>(); //Making it a map instead of list for easier lookup
  List<Id> listIds = new List<Id>();

  for (Quote__c childObj : Trigger.new) {
    listIds.add(childObj.Opportunity);
  }

  //Populate the map. Also make sure you select the field you want to update, amount
  //The child relationship is more likely called Quotes__r (not Quote__r) but check
  //You only need to select the child quotes if you are going to do something for example checking whether the quote in the trigger is the latest
  parentOpps = new Map<Id, Opportunity>([SELECT id, amount Name,(SELECT ID, Total_List_Price__c FROM Quotes__r)
                                        FROM Opportunity WHERE ID IN :listIds]);

  for (Quote__c quote: Trigger:new){
     Opportunity myParentOpp = parentOpps.get(quote.Opportunity__c);
     myParentOpp.Amount = quote.Total_List_Price__c;
  }

  update parentOpps.values();
}

global class SomeClass {
  @future
  public static void someFutureMethod(List<Id> recordIds) {
    List<Account> accounts = [Select Id, Name from Account Where Id IN :recordIds];
    // process account records to do awesome stuff
  }
}
public class SomeClass {
  public static void someMethod {
    Map<Id, Subscription__c> parentRecord = new Map<Id, Subscription__c>();
    List<Id> listIds = new List<Id>();

    for ({})

    parentRecord = new Map<Id, Subscription__c>([SELECT Id, Name FROM Subscription__c WHERE ID IN :listIds]);
  }

  update parentRecords.();
}
